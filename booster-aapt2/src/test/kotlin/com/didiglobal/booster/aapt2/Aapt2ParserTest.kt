package com.didiglobal.booster.aapt2

import java.io.File
import java.net.URL
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertNotNull
import kotlin.test.assertTrue

class Aapt2ParserTest {

    @Test
    fun `parse flat generated by 3_3_0`() {
        assertAapt2ContainerParsing("3.3.0")
    }

    @Test
    fun `parse flat generated by 3_3_1`() {
        assertAapt2ContainerParsing("3.3.1")
    }

    @Test
    fun `parse flat generated by 3_3_2`() {
        assertAapt2ContainerParsing("3.3.2")
    }

    @Test
    fun `parse flat generated by 3_4_0`() {
        assertAapt2ContainerParsing("3.4.0")
    }

    @Test
    fun `parse flat generated by 3_4_1`() {
        assertAapt2ContainerParsing("3.4.1")
    }

    @Test
    fun `parse flat generated by 7_2_0`() {
        assertAapt2ContainerParsing("7.2.0")
    }

        @Test
    fun `parse flat generated by 7_2_1`() {
        assertAapt2ContainerParsing("7.2.1")
    }

    @Test
    fun `parse flat generated by 7_2_2`() {
        assertAapt2ContainerParsing("7.2.2")
    }

    private fun assertAapt2ContainerParsing(version: String) {
        javaClass.getResource(version)?.let(URL::getFile)?.let(::File)?.listFiles { _, file ->
            file.endsWith(".flat")
        }?.forEach { flat ->
            val metadata = flat.metadata
            assertNotNull(metadata)
            assertTrue("sourcePath is empty: $flat", metadata.sourcePath::isNotEmpty)
            assertTrue("resourceName is empty: $flat", metadata.resourceName::isNotEmpty)
            assertTrue("sourcePath is shorter than resourceName") { metadata.sourcePath.length > metadata.resourceName.length }

            val container = BinaryParser(flat).use { parser ->
                parser.parseAapt2Container()
            }
            assertEquals(container.header.count, container.entries.size)

            container.entries.map {
                it as Aapt2Container.ResFile
            }.forEach { res ->
                assertNotNull(res)
            }
        }
    }

}
