buildscript {
    ext.kotlin_version = '1.3.31'

    repositories {
        mavenLocal()
        google()
        mavenCentral()
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.21.2"
        classpath "de.marcphilipp.gradle:nexus-publish-plugin:0.4.0"
    }
}

apply plugin: 'io.codearte.nexus-staging'

allprojects { project ->
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'de.marcphilipp.nexus-publish'

    group = 'com.didiglobal.booster'
    version = '1.3.1'

    repositories {
        mavenLocal()
        google()
        mavenCentral()
        jcenter()
    }

    javadoc {
        failOnError = false
    }

    task packageJavadoc(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task packageSources(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives packageJavadoc, packageSources
    }

    signing {
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                pom.project {
                    groupId project.group
                    artifactId project.name
                    version project.version
                    name project.name
                    url 'https://github.com/didi/booster'
                    description project.description ?: project.name

                    scm {
                        connection 'scm:git:git://github.com/didi/booster.git'
                        developerConnection 'scm:git:git@github.com:didi/booster.git'
                        url 'https://github.com/didi/booster'
                    }

                    licenses {
                        license {
                            name 'Apache License'
                            url 'https://www.apache.org/licenses/LICENSE-2.0'
                        }
                    }
                }
                pom.withXml { xml ->
                    (['git', 'log', '--format=%aN %aE'].execute() | ['sort', '-u'].execute()).with {
                        waitForOrKill(5000)
                        if (0 == exitValue()) {
                            def developers = xml.asNode().appendNode('developers')
                            text.eachLine { line ->
                                def author = line.split('\\s+')
                                if (author.length > 1) {
                                    developers.appendNode('developer').with {
                                        appendNode('id', author[0])
                                        appendNode('email', author[1])
                                    }
                                }
                            }
                        }
                    }
                }
                repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                    authentication(userName: OSSRH_USERNAME, password: OSSRH_PASSWORD)
                }
                snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                    authentication(userName: OSSRH_USERNAME, password: OSSRH_PASSWORD)
                }
            }
        }
    }

    test {
        testLogging {
            events "passed", "skipped", "failed", "standardOut", "standardError"
        }
    }

    nexusPublishing {
        repositories {
            sonatype {
                username = OSSRH_USERNAME
                password = OSSRH_PASSWORD
            }
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId = project.group
                artifactId = project.name
                version = project.version

                from components.java

                artifact project.packageSources {
                    classifier "sources"
                }

                artifact project.packageJavadoc {
                    classifier "javadoc"
                }

                pom {
                    name = project.name
                    url = 'https://github.com/didi/booster'
                    description = project.description ?: project.name

                    scm {
                        connection = 'scm:git:git://github.com/didi/booster.git'
                        developerConnection = 'scm:git:git@github.com:didi/booster.git'
                        url = 'https://github.com/didi/booster'
                    }

                    licenses {
                        license {
                            name = 'Apache License'
                            url = 'https://www.apache.org/licenses/LICENSE-2.0'
                        }
                    }
                }
                pom.withXml { xml ->
                    (['git', 'log', '--format=%aN %aE'].execute() | ['sort', '-u'].execute()).with {
                        waitForOrKill(5000)
                        if (0 == exitValue()) {
                            def developers = xml.asNode().appendNode('developers')
                            text.eachLine { line ->
                                def author = line.split('\\s+')
                                if (author.length > 1) {
                                    developers.appendNode('developer').with {
                                        appendNode('id', author[0])
                                        appendNode('email', author[1])
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    signing {
        sign publishing.publications.mavenJava
    }
}

subprojects { project ->
    rootProject.clean.dependsOn project.clean
}

dependencies {
    implementation project(':booster-gradle-plugin')
}

nexusStaging {
    packageGroup = "com.didiglobal"
    username = OSSRH_USERNAME
    password = OSSRH_PASSWORD
    numberOfRetries = 50
    delayBetweenRetriesInMillis = 3000
}
