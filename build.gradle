import static org.gradle.kotlin.dsl.KotlinDependencyExtensionsKt.embeddedKotlinVersion

buildscript {
    ext.kotlin_version = embeddedKotlinVersion

    repositories {
        mavenLocal()
        google()
        mavenCentral()
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.21.2"
        classpath "de.marcphilipp.gradle:nexus-publish-plugin:0.4.0"
        classpath "io.johnsonlee.buildprops:buildprops-gradle-plugin:1.0.0"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.10.1"
    }
}

def OSSRH_USERNAME = project.properties['OSSRH_USERNAME'] ?: System.getenv('OSSRH_USERNAME')
def OSSRH_PASSWORD = project.properties['OSSRH_PASSWORD'] ?: System.getenv('OSSRH_PASSWORD')

apply plugin: 'io.codearte.nexus-staging'
apply plugin: 'org.jetbrains.dokka'

allprojects { project ->
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'de.marcphilipp.nexus-publish'

    group = 'com.didiglobal.booster'
    version = '1.7.1'

    repositories {
        mavenLocal()
        google()
        mavenCentral()
        jcenter()
    }

    javadoc {
        failOnError = false
    }

    task packageJavadoc(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task packageSources(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives packageJavadoc, packageSources
    }

    test {
        testLogging {
            events "passed", "skipped", "failed", "standardOut", "standardError"
        }
    }

    nexusPublishing {
        repositories {
            sonatype {
                username = OSSRH_USERNAME
                password = OSSRH_PASSWORD
            }
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId = project.group
                artifactId = project.name
                version = project.version

                from components.java

                artifact project.packageSources {
                    classifier "sources"
                }

                artifact project.packageJavadoc {
                    classifier "javadoc"
                }

                pom {
                    name = project.name
                    url = 'https://github.com/didi/booster'
                    description = project.description ?: project.name

                    scm {
                        connection = 'scm:git:git://github.com/didi/booster.git'
                        developerConnection = 'scm:git:git@github.com:didi/booster.git'
                        url = 'https://github.com/didi/booster'
                    }

                    licenses {
                        license {
                            name = 'Apache License'
                            url = 'https://www.apache.org/licenses/LICENSE-2.0'
                        }
                    }
                }
                pom.withXml { xml ->
                    (['git', 'log', '--format=%aN %aE'].execute() | ['sort', '-u'].execute()).with {
                        waitForOrKill(5000)
                        if (0 == exitValue()) {
                            def developers = xml.asNode().appendNode('developers')
                            text.eachLine { line ->
                                def sp = line.lastIndexOf(' ')
                                if (sp > 0) {
                                    def id = line.substring(0, sp).trim()
                                    def email = line.substring(sp + 1).trim()
                                    developers.appendNode('developer').with {
                                        appendNode('id', id)
                                        appendNode('email', email)
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    signing {
        sign publishing.publications.mavenJava
    }
}

subprojects { project ->
    rootProject.clean.dependsOn project.clean
}

dependencies {
    implementation project(':booster-gradle-plugin')
}

nexusStaging {
    packageGroup = "com.didiglobal"
    username = OSSRH_USERNAME
    password = OSSRH_PASSWORD
    numberOfRetries = 50
    delayBetweenRetriesInMillis = 3000
}

task reference(type: org.jetbrains.dokka.gradle.DokkaTask, group: 'Documentation') {
    subProjects = [
            'booster-aapt2',
            'booster-android-gradle-api',
            'booster-annotations',
            'booster-api',
            'booster-build',
            'booster-cha',
            'booster-command',
            'booster-kotlinx',
            'booster-task-compression',
            'booster-task-spi',
            'booster-transform-asm',
            'booster-transform-javassist',
            'booster-transform-spi',
            'booster-transform-util'
    ]
    outputFormat = 'html'
    outputDirectory = "${buildDir}/reference"
    configuration {
        perPackageOption {
            prefix = 'com.didiglobal.booster.aapt2.legacy'
            suppress = true
        }
        perPackageOption {
            prefix = 'com.didiglobal.booster.build.BoosterServiceLoader'
            suppress = true
        }
        includes = [
            'booster-aapt2/packages-zh-CN.md',
            'booster-android-gradle-api/packages-zh-CN.md',
            'booster-annotations/packages-zh-CN.md',
            'booster-api/packages-zh-CN.md',
            'booster-build/packages-zh-CN.md',
            'booster-cha/packages-zh-CN.md',
            'booster-command/packages-zh-CN.md',
            'booster-kotlinx/packages-zh-CN.md',
            'booster-task-compression/packages-zh-CN.md',
            'booster-task-spi/packages-zh-CN.md',
            'booster-transform-asm/packages-zh-CN.md',
            'booster-transform-javassist/packages-zh-CN.md',
            'booster-transform-spi/packages-zh-CN.md',
            'booster-transform-util/packages-zh-CN.md',
        ]
        jdkVersion = 8
    }
}
